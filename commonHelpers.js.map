{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["// Напиши скрипт таймера, який здійснює зворотний відлік до певної дати.\n\n//Елементи інтерфейсу\n// Додай в HTML файл розмітку таймера, поля вибору кінцевої дати і кнопку, при кліку на яку таймер повинен запускатися. Додай оформлення елементів інтерфейсу згідно з макетом.\n\n//Бібліотека flatpickr\n// Використовуй бібліотеку flatpickr для того, щоб дозволити користувачеві кросбраузерно вибрати кінцеву дату і час в одному елементі інтерфейсу. Для того щоб підключити CSS код бібліотеки в проєкт, необхідно додати ще один імпорт, крім того, що описаний в документації.\n\n//Бібліотека повідомлень\n// Для відображення повідомлень користувачеві, замість window.alert(), використовуй бібліотеку iziToast. Для того щоб підключити CSS код бібліотеки в проєкт, необхідно додати ще один імпорт, крім того, що описаний у документації.\n\nimport flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\n\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\n//Бібліотека очікує, що її ініціалізують на елементі input[type=\"text\"], тому ми додали до HTML документа поле input#datetime-picker. <input type=\"text\" id=\"datetime-picker\" />\n\nconst selectInput = document.getElementById('datetime-picker');\nconst startBtn = document.querySelector(\"[data-start]\");\n\n// Другим аргументом функції flatpickr(selector, options) можна передати необов'язковий об'єкт параметрів. Ми підготували для тебе об'єкт, який потрібен для виконання завдання. Розберися, за що відповідає кожна властивість у документації «Options» і використовуй його у своєму коді.\n\nlet userSelectedDate;\nconst currentTime = Date.now();\n    \nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    const selectedTime = selectedDates[0].getTime();\n    if (selectedTime <= currentTime) {\n      window.alert(\"Please choose a date in the future\");\n      startBtn.setAttribute('disabled', true);\n    } else {\n      userSelectedDate = selectedTime;\n      startBtn.removeAttribute('disabled');\n    };\n  },\n};\n\nflatpickr(selectInput, options);\n\n// Вибір дати\n// Метод onClose() з об'єкта параметрів викликається щоразу під час закриття елемента інтерфейсу, який створює flatpickr. Саме в ньому варто обробляти дату, обрану користувачем. Параметр selectedDates — це масив обраних дат, тому ми беремо перший елемент selectedDates[0].\n// Тобі ця обрана дата буде потрібна в коді і поза межами цього методу onClose(). Тому оголоси поза межами методу let змінну, наприклад, userSelectedDate, і після валідації її в методі onClose() на минуле/майбутнє запиши обрану дату в цю let змінну.\n// Якщо користувач вибрав дату в минулому, покажи window.alert() з текстом \"Please choose a date in the future\" і зроби кнопку «Start» не активною.\n// Якщо користувач вибрав валідну дату (в майбутньому), кнопка «Start» стає активною.\n// Кнопка «Start» повинна бути неактивною доти, доки користувач не вибрав дату в майбутньому. Зверни увагу, що при обранні валідної дати, не запуску таймера і обранні потім невалідної дати, кнопка після розблокування має знову стати неактивною.\n// Натисканням на кнопку «Start» починається зворотний відлік часу до обраної дати з моменту натискання.\n\nstartBtn.addEventListener('click', () => console.log('Do not touch me!'));\n\n\n//Відлік часу\n// Натисканням на кнопку «Start» скрипт повинен обчислювати раз на секунду, скільки часу залишилось до вказаної дати, і оновлювати інтерфейс таймера, показуючи чотири цифри: дні, години, хвилини і секунди у форматі xx:xx:xx:xx.\n\n// Кількість днів може складатися з більше, ніж двох цифр.\n// Таймер повинен зупинятися, коли дійшов до кінцевої дати, тобто залишок часу дорівнює нулю 00:00:00:00.\n\n//Після запуску таймера натисканням кнопки Старт кнопка Старт і інпут стають неактивним, щоб користувач не міг обрати нову дату, поки йде відлік часу. Після зупинки таймера інпут стає активним, щоб користувач міг обрати наступну дату. Кнопка залишається не активною.\n\n// Для підрахунку значень використовуй готову функцію convertMs, де ms — різниця між кінцевою і поточною датою в мілісекундах.\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\n/* console.log(convertMs(2000)); // {days: 0, hours: 0, minutes: 0, seconds: 2}\nconsole.log(convertMs(140000)); // {days: 0, hours: 0, minutes: 2, seconds: 20}\nconsole.log(convertMs(24140000)); // {days: 0, hours: 6 minutes: 42, seconds: 20} */\n\n// Форматування часу\n// Функція convertMs() повертає об'єкт з розрахованим часом, що залишився до кінцевої дати. Зверни увагу, що вона не форматує результат. Тобто якщо залишилося 4 хвилини або будь-якої іншої складової часу, то функція поверне 4, а не 04. В інтерфейсі таймера необхідно додавати 0, якщо в числі менше двох символів. Напиши функцію, наприклад addLeadingZero(value), яка використовує метод рядка padStart() і перед відмальовуванням інтерфейсу форматує значення.\n\n//Бібліотека повідомлень\n// Для відображення повідомлень користувачеві, замість window.alert(), використовуй бібліотеку iziToast. Для того щоб підключити CSS код бібліотеки в проєкт, необхідно додати ще один імпорт, крім того, що описаний у документації.\n"],"names":["selectInput","startBtn","currentTime","options","selectedDates","flatpickr"],"mappings":"wIAmBA,MAAMA,EAAc,SAAS,eAAe,iBAAiB,EACvDC,EAAW,SAAS,cAAc,cAAc,EAKhDC,EAAc,KAAK,MAEnBC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACAA,EAAc,CAAC,EAAE,QAAO,GACzBF,GAClB,OAAO,MAAM,oCAAoC,EACjDD,EAAS,aAAa,WAAY,EAAI,GAGtCA,EAAS,gBAAgB,UAAU,CAEtC,CACH,EAEAI,EAAUL,EAAaG,CAAO,EAU9BF,EAAS,iBAAiB,QAAS,IAAM,QAAQ,IAAI,kBAAkB,CAAC"}